name: Local DevSecOps Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Job 1: Environment Setup and Validation
  setup:
    name: Environment Setup
    runs-on: self-hosted  # This makes it run on your local runner
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Environment
      run: |
        echo "=== Environment Information ==="
        echo "Hostname: $(hostname)"
        echo "User: $(whoami)"
        echo "Working Directory: $(pwd)"
        echo "Python Version: $(python3 --version)"
        echo "Docker Version: $(docker --version)"
        echo "Docker Scout Version: $(docker scout version)"
        echo "Available Disk Space:"
        df -h
        echo "Available Memory:"
        free -h

  # Job 2: SAST Scanning with Bandit
  sast-scan:
    name: SAST Security Scan
    runs-on: self-hosted
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client libpq-dev python3-dev
        
    - name: Set up Python Environment
      run: |
        python3 -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
        
    - name: Install Application Dependencies
      run: |
        source venv/bin/activate
        if [ -f requirements.txt ]; then 
          pip install -r requirements.txt
        fi
        
    - name: Create Bandit Configuration
      run: |
        cat > bandit.yaml << EOF
        # Bandit configuration for PyGoat
        tests: ['B101', 'B102', 'B103', 'B104', 'B105', 'B106', 'B107', 'B108', 'B110', 'B112', 'B201', 'B301', 'B302', 'B303', 'B304', 'B305', 'B306', 'B307', 'B308', 'B309', 'B310', 'B311', 'B312', 'B313', 'B314', 'B315', 'B316', 'B317', 'B318', 'B319', 'B320', 'B321', 'B322', 'B323', 'B324', 'B325', 'B401', 'B402', 'B403', 'B404', 'B405', 'B406', 'B407', 'B408', 'B409', 'B410', 'B411', 'B412', 'B413', 'B501', 'B502', 'B503', 'B504', 'B505', 'B506', 'B507', 'B601', 'B602', 'B603', 'B604', 'B605', 'B606', 'B607', 'B608', 'B609', 'B610', 'B611', 'B701', 'B702', 'B703']
        
        # Severity and confidence levels
        severity: ['medium', 'high']
        confidence: ['medium', 'high']
        
        # Exclude directories
        exclude_dirs: ['tests', 'venv', '.git', 'node_modules']
        
        # Skip specific tests if needed
        skips: ['B101']  # Skip assert_used test
        EOF
        
    - name: Run Bandit SAST Scan (Full)
      run: |
        source venv/bin/activate
        echo "=== RUNNING FULL BANDIT SCAN ==="
        bandit -r . -f json -o bandit-full-report.json || true
        bandit -r . -f txt -o bandit-full-report.txt || true
        bandit -r . -f csv -o bandit-full-report.csv || true
        
    - name: Run Bandit SAST Scan (Filtered)
      run: |
        source venv/bin/activate
        echo "=== RUNNING FILTERED BANDIT SCAN ==="
        bandit -r . -c bandit.yaml -f json -o bandit-filtered-report.json || true
        bandit -r . -c bandit.yaml -f txt -o bandit-filtered-report.txt || true
        bandit -r . -c bandit.yaml -f csv -o bandit-filtered-report.csv || true
        
    - name: Display Bandit Results
      run: |
        echo "=== BANDIT SCAN RESULTS SUMMARY ==="
        echo "--- Full Scan Results ---"
        if [ -f bandit-full-report.txt ]; then
          cat bandit-full-report.txt
        else
          echo "No full scan results found"
        fi
        echo ""
        echo "--- Filtered Scan Results ---"
        if [ -f bandit-filtered-report.txt ]; then
          cat bandit-filtered-report.txt
        else
          echo "No filtered scan results found"
        fi
        
    - name: Archive Bandit Reports
      run: |
        mkdir -p reports/bandit
        mv bandit-*.* reports/bandit/ 2>/dev/null || true
        ls -la reports/bandit/
        
    - name: Upload Bandit Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-reports
        path: reports/bandit/

  # Job 3: Docker Build and Security Scan
  docker-security:
    name: Docker Security Scan
    runs-on: self-hosted
    needs: [setup, sast-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker Image Locally
      run: |
        echo "=== BUILDING DOCKER IMAGE ==="
        IMAGE_NAME="local-pygoat"
        IMAGE_TAG="devsecops-$(date +%s)"
        
        # Build the image
        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
        
        # Save image info for later steps
        echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        
        echo "Built image: ${IMAGE_NAME}:${IMAGE_TAG}"
        docker images | grep ${IMAGE_NAME}
        
    - name: Docker Scout Quick View
      run: |
        echo "=== DOCKER SCOUT QUICKVIEW ==="
        docker scout quickview ${IMAGE_NAME}:latest || echo "Quickview failed, continuing..."
        
    - name: Docker Scout CVE Analysis (Basic)
      run: |
        echo "=== DOCKER SCOUT CVE ANALYSIS ==="
        docker scout cves ${IMAGE_NAME}:latest || echo "CVE analysis failed, continuing..."
        
    - name: Docker Scout CVE Analysis (Detailed)
      run: |
        echo "=== DOCKER SCOUT DETAILED CVE ANALYSIS ==="
        mkdir -p reports/docker-scout
        
        # Generate different report formats (simplified for compatibility)
        docker scout cves ${IMAGE_NAME}:latest > reports/docker-scout/scout-cves-table.txt 2>&1 || true
        
        # Try to get critical/high severity only (fallback if flags don't work)
        docker scout cves ${IMAGE_NAME}:latest 2>&1 | grep -E "(CRITICAL|HIGH)" > reports/docker-scout/scout-critical-high.txt || echo "No critical/high issues found or filtering not supported" > reports/docker-scout/scout-critical-high.txt
        
        echo "=== SCOUT REPORTS GENERATED ==="
        ls -la reports/docker-scout/
        
    - name: Display Docker Scout Results
      run: |
        echo "=== DOCKER SCOUT RESULTS SUMMARY ==="
        if [ -f reports/docker-scout/scout-critical-high.txt ]; then
          echo "--- Critical and High Severity Issues ---"
          cat reports/docker-scout/scout-critical-high.txt
        fi
        
        if [ -f reports/docker-scout/scout-cves-table.txt ]; then
          echo "--- All CVE Issues (First 50 lines) ---"
          head -50 reports/docker-scout/scout-cves-table.txt
        fi
        
    - name: Upload Docker Scout Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-scout-reports
        path: reports/docker-scout/
        
    - name: Test Application Locally
      run: |
        echo "=== TESTING APPLICATION LOCALLY ==="
        
        # First check container structure to find manage.py
        echo "=== CHECKING CONTAINER STRUCTURE ==="
        docker run --rm ${IMAGE_NAME}:latest find /app -name "manage.py" -type f || echo "manage.py not found in /app"
        docker run --rm ${IMAGE_NAME}:latest ls -la /app || echo "Cannot list /app"
        
        # Start container in background with proper command
        if docker run --rm ${IMAGE_NAME}:latest test -f /app/manage.py; then
          echo "Found manage.py in /app"
          CONTAINER_ID=$(docker run -d -p 8000:8000 ${IMAGE_NAME}:latest python manage.py runserver 0.0.0.0:8000)
        elif docker run --rm ${IMAGE_NAME}:latest test -f /app/pygoat/manage.py; then
          echo "Found manage.py in /app/pygoat"
          CONTAINER_ID=$(docker run -d -p 8000:8000 ${IMAGE_NAME}:latest python pygoat/manage.py runserver 0.0.0.0:8000)
        else
          echo "Cannot find manage.py, using default container command"
          CONTAINER_ID=$(docker run -d -p 8000:8000 ${IMAGE_NAME}:latest)
        fi
        
        echo "Started container: $CONTAINER_ID"
        
        # Wait for application to start
        sleep 15
        
        # Test if application is responding
        curl -f http://localhost:8000 || echo "Application health check failed - this is expected for PyGoat"
        
        # Show container logs for debugging
        echo "=== Container Logs ==="
        docker logs $CONTAINER_ID
        
        # Stop the test container
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID
        
        echo "Local testing completed"

  # Job 4: Security Report Analysis
  security-analysis:
    name: Security Analysis & Reporting
    runs-on: self-hosted
    needs: [sast-scan, docker-security]
    if: always()
    
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate Security Summary Report
      run: |
        echo "=== GENERATING SECURITY SUMMARY REPORT ==="
        mkdir -p reports/summary
        
        cat > reports/summary/security-summary.md << 'EOF'
        # DevSecOps Security Analysis Report
        
        Generated on: $(date)
        Repository: $(git remote get-url origin)
        Commit: $(git rev-parse HEAD)
        
        ## SAST (Static Application Security Testing) Results
        
        ### Bandit Scan Summary
        - **Tool**: Bandit Python Security Scanner
        - **Scope**: Python source code analysis
        - **Configuration**: Custom severity and confidence filtering
        
        EOF
        
        # Add Bandit results if available
        if [ -f bandit-security-reports/bandit-filtered-report.txt ]; then
          echo "### Filtered Bandit Results" >> reports/summary/security-summary.md
          echo '```' >> reports/summary/security-summary.md
          cat bandit-security-reports/bandit-filtered-report.txt >> reports/summary/security-summary.md
          echo '```' >> reports/summary/security-summary.md
        fi
        
        # Add Docker Scout results if available
        cat >> reports/summary/security-summary.md << 'EOF'
        
        ## Container Security Results
        
        ### Docker Scout Analysis
        - **Tool**: Docker Scout CVE Scanner
        - **Scope**: Container image vulnerabilities
        - **Focus**: Critical and High severity issues
        
        EOF
        
        if [ -f docker-scout-reports/scout-critical-high.txt ]; then
          echo "### Critical and High Severity Issues" >> reports/summary/security-summary.md
          echo '```' >> reports/summary/security-summary.md
          cat docker-scout-reports/scout-critical-high.txt >> reports/summary/security-summary.md
          echo '```' >> reports/summary/security-summary.md
        fi
        
        # Display the summary
        cat reports/summary/security-summary.md
        
    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: reports/summary/

  # Job 5: Optional Local Deployment
  local-deploy:
    name: Local Deployment Test
    runs-on: self-hosted
    needs: [docker-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy Application Locally
      run: |
        echo "=== DEPLOYING APPLICATION LOCALLY ==="
        
        # Stop any existing PyGoat containers
        docker stop pygoat-local 2>/dev/null || true
        docker rm pygoat-local 2>/dev/null || true
        
        # First, let's check the container structure
        echo "=== CHECKING CONTAINER STRUCTURE ==="
        docker run --rm local-pygoat:latest find /app -name "manage.py" -type f || echo "manage.py not found in /app"
        docker run --rm local-pygoat:latest ls -la /app || echo "Cannot list /app"
        
        # Try different startup commands based on what we find
        echo "=== TRYING TO START APPLICATION ==="
        if docker run --rm local-pygoat:latest test -f /app/manage.py; then
          echo "Found manage.py in /app, using: python manage.py runserver"
          docker run -d --name pygoat-local -p 8080:8000 local-pygoat:latest python manage.py runserver 0.0.0.0:8000
        elif docker run --rm local-pygoat:latest test -f /app/pygoat/manage.py; then
          echo "Found manage.py in /app/pygoat, using: python pygoat/manage.py runserver"
          docker run -d --name pygoat-local -p 8080:8000 local-pygoat:latest python pygoat/manage.py runserver 0.0.0.0:8000
        else
          echo "Cannot find manage.py, checking container entrypoint"
          docker run --rm local-pygoat:latest ls -la /
          # Fallback: try to run without specifying command (use default from Dockerfile)
          docker run -d --name pygoat-local -p 8080:8000 local-pygoat:latest
        fi
        
        # Wait for startup
        sleep 20
        
        # Verify deployment
        if curl -f http://localhost:8080 2>/dev/null; then
          echo "✅ Application successfully deployed and accessible at http://localhost:8080"
        else
          echo "❌ Application deployment failed or not responding"
          echo "=== Container Logs ==="
          docker logs pygoat-local
        fi
        
    - name: Display Deployment Info
      run: |
        echo "=== DEPLOYMENT INFORMATION ==="
        echo "Application URL: http://localhost:8080"
        echo "Container Status:"
        docker ps | grep pygoat-local
        echo "Container Logs (last 20 lines):"
        docker logs --tail 20 pygoat-local
